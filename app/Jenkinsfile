pipeline{
    
    agent {
        label 'eng110-jenkins-worker'
    }
    
    environment {
        registry = "samuelwalters/app"
        registryCredential = "docker-credentials"
    }
    
    stages {
        stage("Checkout") {
            steps {
                script {
                def scmVars = checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/samuel-walters/Complete-CICD']]])
                env.GIT_COMMIT = scmVars.GIT_COMMIT
                echo "${env.GIT_COMMIT}"
                }
            }
        }
        
        stage("Allow permission to use Docker") {
            steps {
                sh "sudo chown root:$USER /var/run/docker.sock"
            }
        }
        
        stage("Building our image") {
            steps {
                script {
                    dir("app") {
                        dockerImage = docker.build(registry + ":latest", "-t " + registry + ":\$(git rev-parse HEAD) .")
                    }
                }
            }
        }
        
        stage ("Push image") {
            steps {
                script {
                    dir("app") { 
                        docker.withRegistry('', registryCredential) {
                            dockerImage.push("latest")
                            dockerImage.push("${env.GIT_COMMIT}")
                        }
                    }
                }
            }
        }
        
        stage ("Create file containing the rolling update command"){
            steps {
                script {
                    try {
                        sh 'rm /home/jenkins/rolling_update.txt'
                    } catch (err) {
                        echo err.getMessage()
                    }
                    sh 'touch /home/jenkins/rolling_update.txt'
                    sh "echo 'kubectl set image deployments/eng110-node-deployment node=samuelwalters/app:${env.GIT_COMMIT}' > /home/jenkins/rolling_update.txt"
                }
            }
        }
        stage ('Run ansible pipeline') {
            steps {
                build job: 'run_ansible', parameters: [
                    [$class: 'BooleanParameterValue', name: 'Initialise', value: false],
                    [$class: 'BooleanParameterValue', name: 'Rolling', value: true]
                    ], wait: false
            }
        }
    }
}